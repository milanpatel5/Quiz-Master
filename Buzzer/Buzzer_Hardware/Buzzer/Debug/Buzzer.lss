
Buzzer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000268  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000002bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000085  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_aranges 00000100  00000000  00000000  00000a10  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000817  00000000  00000000  00000b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 0000024b  00000000  00000000  00001327  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000621  00000000  00000000  00001572  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000108  00000000  00000000  00001b94  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000001b7  00000000  00000000  00001c9c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000251  00000000  00000000  00001e53  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e6       	ldi	r30, 0x68	; 104
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 54 00 	call	0xa8	; 0xa8 <main>
  8a:	0c 94 32 01 	jmp	0x264	; 0x264 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Delay_ms>:
#include <avr/interrupt.h>
#include <avr/sfr_defs.h>

void Delay_ms(unsigned int i)
{
	while(i)
  92:	00 97       	sbiw	r24, 0x00	; 0
  94:	41 f0       	breq	.+16     	; 0xa6 <Delay_ms+0x14>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  96:	e9 ef       	ldi	r30, 0xF9	; 249
  98:	f0 e0       	ldi	r31, 0x00	; 0
  9a:	31 97       	sbiw	r30, 0x01	; 1
  9c:	f1 f7       	brne	.-4      	; 0x9a <Delay_ms+0x8>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <Delay_ms+0xe>
  a0:	00 00       	nop
	{
		_delay_ms(1);
		i--;
  a2:	01 97       	sbiw	r24, 0x01	; 1
#include <avr/interrupt.h>
#include <avr/sfr_defs.h>

void Delay_ms(unsigned int i)
{
	while(i)
  a4:	c1 f7       	brne	.-16     	; 0x96 <Delay_ms+0x4>
  a6:	08 95       	ret

000000a8 <main>:
}

int main(void)
{
	//USART_Init(51);
	DDRA=0xFF;
  a8:	8f ef       	ldi	r24, 0xFF	; 255
  aa:	8a bb       	out	0x1a, r24	; 26
	PORTA=0xFF;
  ac:	8b bb       	out	0x1b, r24	; 27
	DDRB=0xFF;
  ae:	87 bb       	out	0x17, r24	; 23
	PORTB=0xFF; 
  b0:	88 bb       	out	0x18, r24	; 24
  b2:	ff cf       	rjmp	.-2      	; 0xb2 <main+0xa>

000000b4 <USART_Init>:
void USART_Init( unsigned int baud )
{
	/* Set baud rate */
	//unsigned int num;
	//num=((F_CPU)/(16*baud))-1;
	UBRRH = (unsigned char)(baud>>8);
  b4:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)baud;
  b6:	89 b9       	out	0x09, r24	; 9
	/* Enable receiver and transmitter */
	UCSRB = (1<<RXEN)|(1<<TXEN); //|(1<<RXCIE);
  b8:	88 e1       	ldi	r24, 0x18	; 24
  ba:	8a b9       	out	0x0a, r24	; 10
	/* Set frame format: 8data, 2stop bit */
	UCSRC = (1<<URSEL)|(1<<USBS)|(3<<UCSZ0);
  bc:	8e e8       	ldi	r24, 0x8E	; 142
  be:	80 bd       	out	0x20, r24	; 32
}
  c0:	08 95       	ret

000000c2 <USART_InterruptEnable>:

void USART_InterruptEnable()
{
	UCSRB|=(1<<RXCIE);
  c2:	57 9a       	sbi	0x0a, 7	; 10
}
  c4:	08 95       	ret

000000c6 <USART_Transmitchar>:

void USART_Transmitchar( unsigned char data )
{
	/* Wait for empty transmit buffer */
	while ( !( UCSRA & (1<<UDRE)) )
  c6:	5d 9b       	sbis	0x0b, 5	; 11
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <USART_Transmitchar>
	;
	/* Put data into buffer, sends the data */
	UDR = data;
  ca:	8c b9       	out	0x0c, r24	; 12
}
  cc:	08 95       	ret

000000ce <USART_Receive>:

unsigned char USART_Receive( void )
{
	/* Wait for data to be received */
	while ( !(UCSRA & (1<<RXC)) )
  ce:	5f 9b       	sbis	0x0b, 7	; 11
  d0:	fe cf       	rjmp	.-4      	; 0xce <USART_Receive>
	;
	/* Get and return received data from buffer */
	return UDR;
  d2:	8c b1       	in	r24, 0x0c	; 12
}
  d4:	08 95       	ret

000000d6 <USART_ReceiveNonBlocking>:

unsigned char USART_ReceiveNonBlocking(void)
{
	if((UCSRA & (1<<RXC)))
  d6:	5f 9b       	sbis	0x0b, 7	; 11
  d8:	02 c0       	rjmp	.+4      	; 0xde <USART_ReceiveNonBlocking+0x8>
		return UDR;
  da:	8c b1       	in	r24, 0x0c	; 12
  dc:	08 95       	ret
	else return 0;
  de:	80 e0       	ldi	r24, 0x00	; 0
}
  e0:	08 95       	ret

000000e2 <USART_TransmitString>:

void USART_TransmitString(char *str)
{
  e2:	cf 93       	push	r28
  e4:	df 93       	push	r29
  e6:	ec 01       	movw	r28, r24
	 while(*str>0)
  e8:	88 81       	ld	r24, Y
  ea:	88 23       	and	r24, r24
  ec:	31 f0       	breq	.+12     	; 0xfa <USART_TransmitString+0x18>
	if((UCSRA & (1<<RXC)))
		return UDR;
	else return 0;
}

void USART_TransmitString(char *str)
  ee:	21 96       	adiw	r28, 0x01	; 1
{
	 while(*str>0)
	 {
		 USART_Transmitchar(*str);
  f0:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Transmitchar>
	else return 0;
}

void USART_TransmitString(char *str)
{
	 while(*str>0)
  f4:	89 91       	ld	r24, Y+
  f6:	88 23       	and	r24, r24
  f8:	d9 f7       	brne	.-10     	; 0xf0 <USART_TransmitString+0xe>
	 {
		 USART_Transmitchar(*str);
		 //_delay_ms(1);
		 str++;
	 }
}
  fa:	df 91       	pop	r29
  fc:	cf 91       	pop	r28
  fe:	08 95       	ret

00000100 <USART_TransmitNumber>:

void USART_TransmitNumber(unsigned long n){
 100:	0f 93       	push	r16
 102:	1f 93       	push	r17
 104:	cf 93       	push	r28
 106:	df 93       	push	r29
 108:	dc 01       	movw	r26, r24
 10a:	cb 01       	movw	r24, r22
  if(n >= 10){
 10c:	8a 30       	cpi	r24, 0x0A	; 10
 10e:	91 05       	cpc	r25, r1
 110:	a1 05       	cpc	r26, r1
 112:	b1 05       	cpc	r27, r1
 114:	70 f0       	brcs	.+28     	; 0x132 <USART_TransmitNumber+0x32>
    USART_TransmitNumber(n/10);
 116:	bc 01       	movw	r22, r24
 118:	cd 01       	movw	r24, r26
 11a:	2a e0       	ldi	r18, 0x0A	; 10
 11c:	30 e0       	ldi	r19, 0x00	; 0
 11e:	40 e0       	ldi	r20, 0x00	; 0
 120:	50 e0       	ldi	r21, 0x00	; 0
 122:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <__udivmodsi4>
 126:	d6 2f       	mov	r29, r22
 128:	ca 01       	movw	r24, r20
 12a:	b9 01       	movw	r22, r18
 12c:	0e 94 80 00 	call	0x100	; 0x100 <USART_TransmitNumber>
    n = n%10;
 130:	8d 2f       	mov	r24, r29
  }
  USART_Transmitchar(n+'0'); /* n is between 0 and 9 */
 132:	80 5d       	subi	r24, 0xD0	; 208
 134:	0e 94 63 00 	call	0xc6	; 0xc6 <USART_Transmitchar>
}
 138:	df 91       	pop	r29
 13a:	cf 91       	pop	r28
 13c:	1f 91       	pop	r17
 13e:	0f 91       	pop	r16
 140:	08 95       	ret

00000142 <USART_TransmitBinary>:

void USART_TransmitBinary(int num)
{
 142:	ef 92       	push	r14
 144:	ff 92       	push	r15
 146:	0f 93       	push	r16
 148:	1f 93       	push	r17
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
	int i=0,j=0;
	while(num)
 150:	00 97       	sbiw	r24, 0x00	; 0
 152:	51 f1       	breq	.+84     	; 0x1a8 <USART_TransmitBinary+0x66>
  USART_Transmitchar(n+'0'); /* n is between 0 and 9 */
}

void USART_TransmitBinary(int num)
{
	int i=0,j=0;
 154:	00 e0       	ldi	r16, 0x00	; 0
 156:	10 e0       	ldi	r17, 0x00	; 0
	while(num)
	{
		USART_TransmitNumber(num%2);
 158:	ee 24       	eor	r14, r14
 15a:	ff 24       	eor	r15, r15
 15c:	68 94       	set
 15e:	e1 f8       	bld	r14, 1
 160:	ce 01       	movw	r24, r28
 162:	b7 01       	movw	r22, r14
 164:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <__divmodhi4>
 168:	9c 01       	movw	r18, r24
 16a:	b9 01       	movw	r22, r18
 16c:	88 27       	eor	r24, r24
 16e:	77 fd       	sbrc	r23, 7
 170:	80 95       	com	r24
 172:	98 2f       	mov	r25, r24
 174:	0e 94 80 00 	call	0x100	; 0x100 <USART_TransmitNumber>
		i++;
 178:	0f 5f       	subi	r16, 0xFF	; 255
 17a:	1f 4f       	sbci	r17, 0xFF	; 255
		num=num/2;
 17c:	ce 01       	movw	r24, r28
 17e:	dd 23       	and	r29, r29
 180:	0c f4       	brge	.+2      	; 0x184 <USART_TransmitBinary+0x42>
 182:	01 96       	adiw	r24, 0x01	; 1
 184:	ec 01       	movw	r28, r24
 186:	d5 95       	asr	r29
 188:	c7 95       	ror	r28
}

void USART_TransmitBinary(int num)
{
	int i=0,j=0;
	while(num)
 18a:	20 97       	sbiw	r28, 0x00	; 0
 18c:	49 f7       	brne	.-46     	; 0x160 <USART_TransmitBinary+0x1e>
	{
		USART_TransmitNumber(num%2);
		i++;
		num=num/2;
	}
	if(i!=8)
 18e:	08 30       	cpi	r16, 0x08	; 8
 190:	11 05       	cpc	r17, r1
 192:	c1 f0       	breq	.+48     	; 0x1c4 <USART_TransmitBinary+0x82>
	{
		for(j=0;j<(8-i);j++)
 194:	c8 e0       	ldi	r28, 0x08	; 8
 196:	d0 e0       	ldi	r29, 0x00	; 0
 198:	c0 1b       	sub	r28, r16
 19a:	d1 0b       	sbc	r29, r17
 19c:	1c 16       	cp	r1, r28
 19e:	1d 06       	cpc	r1, r29
 1a0:	8c f4       	brge	.+34     	; 0x1c4 <USART_TransmitBinary+0x82>
 1a2:	00 e0       	ldi	r16, 0x00	; 0
 1a4:	10 e0       	ldi	r17, 0x00	; 0
 1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <USART_TransmitBinary+0x6e>
 1a8:	c8 e0       	ldi	r28, 0x08	; 8
 1aa:	d0 e0       	ldi	r29, 0x00	; 0
}

void USART_TransmitBinary(int num)
{
	int i=0,j=0;
	while(num)
 1ac:	00 e0       	ldi	r16, 0x00	; 0
 1ae:	10 e0       	ldi	r17, 0x00	; 0
		num=num/2;
	}
	if(i!=8)
	{
		for(j=0;j<(8-i);j++)
		USART_TransmitNumber(0);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	70 e0       	ldi	r23, 0x00	; 0
 1b4:	cb 01       	movw	r24, r22
 1b6:	0e 94 80 00 	call	0x100	; 0x100 <USART_TransmitNumber>
		i++;
		num=num/2;
	}
	if(i!=8)
	{
		for(j=0;j<(8-i);j++)
 1ba:	0f 5f       	subi	r16, 0xFF	; 255
 1bc:	1f 4f       	sbci	r17, 0xFF	; 255
 1be:	0c 17       	cp	r16, r28
 1c0:	1d 07       	cpc	r17, r29
 1c2:	b1 f7       	brne	.-20     	; 0x1b0 <USART_TransmitBinary+0x6e>
		USART_TransmitNumber(0);
	}
	
}
 1c4:	df 91       	pop	r29
 1c6:	cf 91       	pop	r28
 1c8:	1f 91       	pop	r17
 1ca:	0f 91       	pop	r16
 1cc:	ff 90       	pop	r15
 1ce:	ef 90       	pop	r14
 1d0:	08 95       	ret

000001d2 <__divmodhi4>:
 1d2:	97 fb       	bst	r25, 7
 1d4:	09 2e       	mov	r0, r25
 1d6:	07 26       	eor	r0, r23
 1d8:	0a d0       	rcall	.+20     	; 0x1ee <__divmodhi4_neg1>
 1da:	77 fd       	sbrc	r23, 7
 1dc:	04 d0       	rcall	.+8      	; 0x1e6 <__divmodhi4_neg2>
 1de:	2e d0       	rcall	.+92     	; 0x23c <__udivmodhi4>
 1e0:	06 d0       	rcall	.+12     	; 0x1ee <__divmodhi4_neg1>
 1e2:	00 20       	and	r0, r0
 1e4:	1a f4       	brpl	.+6      	; 0x1ec <__divmodhi4_exit>

000001e6 <__divmodhi4_neg2>:
 1e6:	70 95       	com	r23
 1e8:	61 95       	neg	r22
 1ea:	7f 4f       	sbci	r23, 0xFF	; 255

000001ec <__divmodhi4_exit>:
 1ec:	08 95       	ret

000001ee <__divmodhi4_neg1>:
 1ee:	f6 f7       	brtc	.-4      	; 0x1ec <__divmodhi4_exit>
 1f0:	90 95       	com	r25
 1f2:	81 95       	neg	r24
 1f4:	9f 4f       	sbci	r25, 0xFF	; 255
 1f6:	08 95       	ret

000001f8 <__udivmodsi4>:
 1f8:	a1 e2       	ldi	r26, 0x21	; 33
 1fa:	1a 2e       	mov	r1, r26
 1fc:	aa 1b       	sub	r26, r26
 1fe:	bb 1b       	sub	r27, r27
 200:	fd 01       	movw	r30, r26
 202:	0d c0       	rjmp	.+26     	; 0x21e <__udivmodsi4_ep>

00000204 <__udivmodsi4_loop>:
 204:	aa 1f       	adc	r26, r26
 206:	bb 1f       	adc	r27, r27
 208:	ee 1f       	adc	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	a2 17       	cp	r26, r18
 20e:	b3 07       	cpc	r27, r19
 210:	e4 07       	cpc	r30, r20
 212:	f5 07       	cpc	r31, r21
 214:	20 f0       	brcs	.+8      	; 0x21e <__udivmodsi4_ep>
 216:	a2 1b       	sub	r26, r18
 218:	b3 0b       	sbc	r27, r19
 21a:	e4 0b       	sbc	r30, r20
 21c:	f5 0b       	sbc	r31, r21

0000021e <__udivmodsi4_ep>:
 21e:	66 1f       	adc	r22, r22
 220:	77 1f       	adc	r23, r23
 222:	88 1f       	adc	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	1a 94       	dec	r1
 228:	69 f7       	brne	.-38     	; 0x204 <__udivmodsi4_loop>
 22a:	60 95       	com	r22
 22c:	70 95       	com	r23
 22e:	80 95       	com	r24
 230:	90 95       	com	r25
 232:	9b 01       	movw	r18, r22
 234:	ac 01       	movw	r20, r24
 236:	bd 01       	movw	r22, r26
 238:	cf 01       	movw	r24, r30
 23a:	08 95       	ret

0000023c <__udivmodhi4>:
 23c:	aa 1b       	sub	r26, r26
 23e:	bb 1b       	sub	r27, r27
 240:	51 e1       	ldi	r21, 0x11	; 17
 242:	07 c0       	rjmp	.+14     	; 0x252 <__udivmodhi4_ep>

00000244 <__udivmodhi4_loop>:
 244:	aa 1f       	adc	r26, r26
 246:	bb 1f       	adc	r27, r27
 248:	a6 17       	cp	r26, r22
 24a:	b7 07       	cpc	r27, r23
 24c:	10 f0       	brcs	.+4      	; 0x252 <__udivmodhi4_ep>
 24e:	a6 1b       	sub	r26, r22
 250:	b7 0b       	sbc	r27, r23

00000252 <__udivmodhi4_ep>:
 252:	88 1f       	adc	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	5a 95       	dec	r21
 258:	a9 f7       	brne	.-22     	; 0x244 <__udivmodhi4_loop>
 25a:	80 95       	com	r24
 25c:	90 95       	com	r25
 25e:	bc 01       	movw	r22, r24
 260:	cd 01       	movw	r24, r26
 262:	08 95       	ret

00000264 <_exit>:
 264:	f8 94       	cli

00000266 <__stop_program>:
 266:	ff cf       	rjmp	.-2      	; 0x266 <__stop_program>
